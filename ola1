package org.example.ManipulandoAquivos;

import java.io.File;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.nio.file.attribute.FileTime;
import java.util.List;
import java.util.Scanner;
import java.util.concurrent.TimeUnit;

public class MenuIOExemplo {

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        int opcao; //Variable do menu

        //Menu Interativo
        do {
            System.out.println("\n ==== Menu interativo para manipular Arquivos ===");
            System.out.println(" 1. Criar arquivo");
            System.out.println(" 2. Deletar arquivo");
            System.out.println(" 3. Copiar arquivo");
            System.out.println(" 4. Mover/renomear do arquivo");
            System.out.println(" 5. Ver informações do  arquivo");
            System.out.println(" 6. Ler arquivo Linha por linha");
            System.out.println(" 7. Escreve Dentro de um arquivo");
            System.out.println("0. Sair");
            System.out.println("Escola a Opção : ");
            opcao = Integer.parseInt(scanner.nextLine());


            //Para escolher a Opção.
            switch (opcao) {
                case 1 -> criarArquivo();
                case 2 -> deletarArquivo();
                case 3 -> copiarArquivo();
                case 4 -> moverArquivo();
                case 5 -> informacaoarquivo();
                case 6 -> lerArquivo();
                case 7 -> escreverDentroDoArquivo();
                case 0 -> System.out.println("saindo ...");
                default -> System.out.println("Opção invalida!");
            }

        } while (opcao != 0);

    }

    private static void escreverDentroDoArquivo() throws IOException {
        //Ver o arquivo que quer escrever.
        System.out.println("Qual arquivo você quer escrever ?");
        Path arquivo = Path.of(scanner.nextLine()); //caminho do arquivo

        System.out.println("Digite o conteúdo e digite 'FIM' para terminar ");


        var builder = new StringBuilder();

        while (true) {
            String linha = scanner.nextLine();
            if (linha.equalsIgnoreCase("FIM")) break;   //Para iguinorar a entrada se é FIM ou fim 
            builder.append(linha).append("\n");  //O método append() é usado para adicionar (concatenar) dados ao final de uma sequência de caracteres existente.
                                                    // Ele é um método fundamental das classes StringBuilder e StringBuffer.
        }

        Files.writeString(arquivo, builder.toString(), StandardCharsets.UTF_8);
        System.out.println("Arqivo salvo em : " + arquivo.toAbsolutePath());

    }






    private static void lerArquivo() throws IOException {
        System.out.println("Qual arquivo você quer ler ?");
        Path arquivo = Path.of(scanner.nextLine()); //caminho do arquivo

        //Verifica se existe o arquivo
        if (Files.exists(arquivo)){
            List<String> linhas = Files.readAllLines(arquivo, StandardCharsets.UTF_8); //Criando um ArrayList para pegar todas as linhas e ler elas.
            linhas.forEach(System.out::println); //Chama em cada pirntln uma linha do arquivo existente usando o forEach

        }else {
            System.out.println(" Arquivo não encontrado !");
        }
    }

    private static void informacaoarquivo() throws IOException {
        System.out.print("Nome do arquivo para pegar informações : ");
        Path arquivo = Path.of(scanner.nextLine()); //caminho do arquivo

        //Verifica se existe o arquivo
        if (Files.exists(arquivo)){

            //Pega o tamanho do arquivo
            System.out.println("Tamanho do arquivo : " + Files.size(arquivo));
            //Status da última atualização.
            FileTime fTime  =  Files.getLastModifiedTime(arquivo);
            System.out.println(" Ultima modificação:  " + fTime.to(TimeUnit.SECONDS));

            //Verificando se é um diretório.
            System.out.println("É um diretório ? " + Files.isDirectory(arquivo));

            var attrs = Files.readAttributes(arquivo, "*");
            System.out.println(" Atributos completos " + attrs);
        }else {
            System.out.println("Arquivo não encontrado!");
        }
    }


    //Mover um arquivo
    private static void moverArquivo() throws IOException{
        System.out.print("Arquivo de Origem: ");
        Path origem = Path.of(scanner.nextLine()); //caminho do arquivo
        System.out.print("Arquivo de destino: ");
        Path destino = Path.of(scanner.nextLine()); //caminho do arquivo

        Files.move(origem, destino, StandardCopyOption.REPLACE_EXISTING);
            System.out.println("Arquivo movido e  copiado");

    }


    //copia o arquivo
    private static void copiarArquivo() {
        System.out.println("Arquivo de Origem: ");
        Path origem = Path.of(scanner.nextLine()); //caminho do arquivo
        System.out.println("Arquivo de destino: ");
        Path destino = Path.of(scanner.nextLine()); //caminho do arquivo

        try {
            Files.copy(origem, destino, StandardCopyOption.REPLACE_EXISTING);
            System.out.println("Arquivo movido /renomeado! ");
        } catch (IOException e) {
            System.out.println("Arquivo de destino/origem não encontrado; ");
            throw new RuntimeException(e);
        }
    }


    //Deletar arquivo criado ou existente.
    private static void deletarArquivo() {
        System.out.print("Nome do arquivo a Deletar: ");
        Path arquivo = Path.of(scanner.nextLine()); //caminho do arquivo

        if (Files.exists(arquivo)){
            try {
                Files.delete(arquivo);
                System.out.println("Arquivo apagado");
            } catch (IOException e) {
                System.out.println("Arquivo não encontrado");
                throw new RuntimeException(e);

            }

        }
    }

    //Para Criar um arquivo é assim que se faz.
    private static void criarArquivo() {
        System.out.print("Nome do arquivo a criar: ");
        Path arquivo = Path.of(scanner.nextLine()); //caminho do arquivo

        //Usando try-catch para tratar os erros.
        try {
            Files.createFile(arquivo);
            System.out.println("Arquivo criado " + arquivo.toAbsolutePath());
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
}
Fazendo outra coisa...
